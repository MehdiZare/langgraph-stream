name: Deploy to Production

on:
  push:
    branches:
      - claude/langgraph-websocket-test-011CUKGPe1M5R36a5hzuEoBP
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: roboad-backend
  ECS_CLUSTER: roboad-backend-prod-cluster
  ECS_SERVICE: roboad-backend-prod-service

jobs:
  deploy-backend:
    name: Deploy Backend to Production
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      deployments: write
    outputs:
      backend_url: ${{ steps.service-url.outputs.prod_url }}
      image_tag: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_LATEST: latest
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST .

          # Tag with both 'latest' and git SHA
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA

          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST" >> $GITHUB_OUTPUT
          echo "image_sha=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA" >> $GITHUB_OUTPUT

      - name: Check if ECS service exists
        id: check-service
        run: |
          if aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region $AWS_REGION \
            --query 'services[0].status' \
            --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "ECS service exists and is active"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "ECS service does not exist or is not active"
          fi

      - name: Force new deployment (if service exists)
        if: steps.check-service.outputs.exists == 'true'
        run: |
          echo "Forcing new deployment of ECS service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Wait for service to stabilize (if service exists)
        if: steps.check-service.outputs.exists == 'true'
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region $AWS_REGION

      - name: Setup Terraform
        if: steps.check-service.outputs.exists == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.0"

      - name: Get service URL
        if: steps.check-service.outputs.exists == 'true'
        id: service-url
        working-directory: infra/environments/prod
        run: |
          # Initialize Terraform to access outputs
          terraform init

          # Get the production URL from Terraform (uses Cloudflare domain)
          PROD_URL=$(terraform output -raw alb_url)

          echo "prod_url=$PROD_URL" >> $GITHUB_OUTPUT
          echo "Production URL: $PROD_URL"

      - name: Backend deployment summary
        run: |
          echo "## Backend Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images pushed:**" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: \`${{ steps.build-image.outputs.image_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-service.outputs.exists }}" == "true" ]; then
            echo "**ECS Service:** Updated and stable" >> $GITHUB_STEP_SUMMARY
            echo "**Backend URL:** ${{ steps.service-url.outputs.prod_url }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Health Check:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "curl ${{ steps.service-url.outputs.prod_url }}/health" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⏳ **Next:** Frontend deployment starting..." >> $GITHUB_STEP_SUMMARY
          else
            echo "**ECS Service:** Not yet created" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️  **Action Required:** Deploy production infrastructure using Terraform Cloud" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The Docker image has been pushed to ECR, but the ECS service hasn't been created yet." >> $GITHUB_STEP_SUMMARY
            echo "Deploy the production environment by running Terraform in the \`roboad-fast-ws-prod\` workspace." >> $GITHUB_STEP_SUMMARY
          fi

  deploy-frontend:
    name: Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: needs.deploy-backend.outputs.backend_url != ''
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Checkout frontend repository
        uses: actions/checkout@v5
        with:
          repository: RoboAdApp/roboad-front-end
          ref: main
          token: ${{ secrets.FRONTEND_REPO_TOKEN }}

      - name: Deploy to Vercel Production
        id: deploy-vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          BACKEND_URL: ${{ needs.deploy-backend.outputs.backend_url }}
        run: |
          echo "Deploying frontend to Vercel production..."
          echo "Backend URL: $BACKEND_URL"
          echo "Project ID: $VERCEL_PROJECT_ID"
          echo "Org ID: $VERCEL_ORG_ID"
          echo ""

          # Install Vercel CLI
          npm install -g vercel@latest

          # Deploy to production using Vercel CLI
          echo "Running vercel deploy --prod..."
          set +e  # Don't exit on error, we want to capture it
          vercel deploy \
            --prod \
            --token=$VERCEL_TOKEN \
            --scope=$VERCEL_ORG_ID \
            --build-env NEXT_PUBLIC_BACKEND_URL=$BACKEND_URL \
            --yes \
            2>&1 | tee /tmp/vercel-deploy.log

          EXIT_CODE=${PIPESTATUS[0]}
          set -e  # Re-enable exit on error

          echo ""
          echo "Vercel CLI exit code: $EXIT_CODE"
          echo ""

          if [ $EXIT_CODE -eq 0 ]; then
            # Extract URL from output
            DEPLOYMENT_URL=$(grep -oP 'https://[^\s]+' /tmp/vercel-deploy.log | grep -E '(vercel\.app|your-domain\.com)' | tail -1)

            if [ -n "$DEPLOYMENT_URL" ]; then
              echo "vercel_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
              echo "✅ Successfully deployed to Vercel production!"
              echo "   URL: $DEPLOYMENT_URL"
            else
              # Fallback - assume production domain
              echo "vercel_url=https://roboad.ai" >> $GITHUB_OUTPUT
              echo "✅ Deployment completed!"
            fi
          else
            echo "vercel_url=Failed" >> $GITHUB_OUTPUT
            echo "❌ Vercel deployment failed with exit code $EXIT_CODE"
            echo ""
            echo "Full deployment output:"
            cat /tmp/vercel-deploy.log
            exit 1
          fi

      - name: Frontend deployment summary
        run: |
          echo "## Frontend Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** ${{ steps.deploy-vercel.outputs.vercel_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** ${{ needs.deploy-backend.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment Variables:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`NEXT_PUBLIC_BACKEND_URL\`: ${{ needs.deploy-backend.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub deployment
        uses: actions/github-script@v8
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });

            if (deployment.data) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.data.id,
                state: 'success',
                environment_url: '${{ steps.deploy-vercel.outputs.vercel_url }}',
                description: 'Production deployment successful'
              });
            }
