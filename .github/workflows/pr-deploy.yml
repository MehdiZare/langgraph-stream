name: Deploy PR Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - claude/langgraph-websocket-test-011CUKGPe1M5R36a5hzuEoBP
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: roboad-backend
  TF_CLOUD_ORGANIZATION: roboad
  TF_WORKSPACE_PREFIX: roboad-fast-ws-pr

jobs:
  deploy:
    name: Deploy PR Environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: pr-${{ github.event.pull_request.number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.0"

      - name: Create Terraform Cloud workspace if not exists
        env:
          TF_CLOUD_TOKEN: ${{ secrets.TF_API_TOKEN }}
          WORKSPACE_NAME: ${{ env.TF_WORKSPACE_PREFIX }}-${{ github.event.pull_request.number }}
        run: |
          # Check if workspace exists
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE_NAME" \
            | jq -r '.data.id // empty')

          if [ -z "$WORKSPACE_ID" ]; then
            echo "Creating workspace $WORKSPACE_NAME..."
            curl -s \
              --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data @- \
              "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces" <<EOF
          {
            "data": {
              "type": "workspaces",
              "attributes": {
                "name": "$WORKSPACE_NAME",
                "auto-apply": true,
                "description": "PR #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}",
                "terraform-version": "1.9.0",
                "working-directory": "infra/environments/pr-template"
              }
            }
          }
          EOF
          else
            echo "Workspace $WORKSPACE_NAME already exists."
          fi

      - name: Set Terraform Cloud variables
        env:
          TF_CLOUD_TOKEN: ${{ secrets.TF_API_TOKEN }}
          WORKSPACE_NAME: ${{ env.TF_WORKSPACE_PREFIX }}-${{ github.event.pull_request.number }}
        run: |
          # Get workspace ID
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE_NAME" \
            | jq -r '.data.id')

          # Helper function to create/update variable
          set_variable() {
            local key=$1
            local value=$2
            local sensitive=$3
            local category=${4:-"terraform"}

            # Check if variable exists
            VAR_ID=$(curl -s \
              --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
              "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars" \
              | jq -r ".data[] | select(.attributes.key == \"$key\") | .id // empty")

            if [ -z "$VAR_ID" ]; then
              # Create variable
              curl -s \
                --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --request POST \
                --data @- \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars" <<EOF
          {
            "data": {
              "type": "vars",
              "attributes": {
                "key": "$key",
                "value": "$value",
                "category": "$category",
                "sensitive": $sensitive
              }
            }
          }
          EOF
            else
              # Update variable
              curl -s \
                --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --request PATCH \
                --data @- \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars/$VAR_ID" <<EOF
          {
            "data": {
              "type": "vars",
              "attributes": {
                "key": "$key",
                "value": "$value",
                "sensitive": $sensitive
              }
            }
          }
          EOF
            fi
          }

          # Set AWS credentials
          set_variable "AWS_ACCESS_KEY_ID" "${{ secrets.AWS_ACCESS_KEY_ID }}" true "env"
          set_variable "AWS_SECRET_ACCESS_KEY" "${{ secrets.AWS_SECRET_ACCESS_KEY }}" true "env"

          # Set Terraform variables
          set_variable "pr_number" "${{ github.event.pull_request.number }}" false "terraform"
          set_variable "workspace_name" "$WORKSPACE_NAME" false "terraform"

      - name: Terraform Init and Apply
        working-directory: infra/environments/pr-template
        env:
          TF_WORKSPACE: ${{ env.TF_WORKSPACE_PREFIX }}-${{ github.event.pull_request.number }}
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="pr_number=${{ github.event.pull_request.number }}" \
            -var="workspace_name=$TF_WORKSPACE"

      - name: Get ALB URL
        id: get-url
        working-directory: infra/environments/pr-template
        env:
          TF_WORKSPACE: ${{ env.TF_WORKSPACE_PREFIX }}-${{ github.event.pull_request.number }}
        run: |
          ALB_URL=$(terraform output -raw alb_url || echo "pending")
          echo "alb_url=$ALB_URL" >> $GITHUB_OUTPUT

      - name: Comment PR with environment URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const albUrl = '${{ steps.get-url.outputs.alb_url }}';

            const comment = `## PR Environment Deployed

            Your PR environment has been successfully deployed!

            **Environment URL:** ${albUrl}

            **Details:**
            - PR Number: #${prNumber}
            - Image Tag: \`pr-${prNumber}\`
            - Workspace: \`${{ env.TF_WORKSPACE_PREFIX }}-${prNumber}\`

            **Health Check:**
            \`\`\`bash
            curl ${albUrl}/health
            \`\`\`

            ---

            This environment will be automatically destroyed when the PR is closed or merged.
            `;

            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('## PR Environment Deployed')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

      - name: Deployment summary
        run: |
          echo "## PR Environment Deployed" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.get-url.outputs.alb_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
