name: Cleanup PR Environment

on:
  pull_request:
    types: [closed]
    branches:
      - claude/langgraph-websocket-test-011CUKGPe1M5R36a5hzuEoBP
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: roboad-backend
  TF_CLOUD_ORGANIZATION: roboad
  TF_WORKSPACE_PREFIX: roboad-fast-ws-pr

jobs:
  cleanup:
    name: Destroy PR Environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.0"

      - name: Check if workspace exists
        id: check-workspace
        env:
          TF_CLOUD_TOKEN: ${{ secrets.TF_API_TOKEN }}
          WORKSPACE_NAME: ${{ env.TF_WORKSPACE_PREFIX }}-${{ github.event.pull_request.number }}
        run: |
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$WORKSPACE_NAME" \
            | jq -r '.data.id // empty')

          if [ -z "$WORKSPACE_ID" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Workspace $WORKSPACE_NAME does not exist, nothing to clean up."
          else
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT
            echo "Workspace $WORKSPACE_NAME exists, will destroy resources."
          fi

      - name: Terraform Init and Destroy
        if: steps.check-workspace.outputs.exists == 'true'
        working-directory: infra/environments/pr-template
        env:
          TF_WORKSPACE: ${{ env.TF_WORKSPACE_PREFIX }}-${{ github.event.pull_request.number }}
          VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
        run: |
          terraform init
          terraform destroy -auto-approve \
            -var="pr_number=${{ github.event.pull_request.number }}" \
            -var="vercel_project_id=${{ secrets.VERCEL_PROJECT_ID }}" \
            -var="vercel_team_id=${{ secrets.VERCEL_TEAM_ID }}" || true

      - name: Delete Terraform Cloud workspace
        if: steps.check-workspace.outputs.exists == 'true'
        env:
          TF_CLOUD_TOKEN: ${{ secrets.TF_API_TOKEN }}
          WORKSPACE_ID: ${{ steps.check-workspace.outputs.workspace_id }}
        run: |
          echo "Deleting workspace..."
          curl -s \
            --header "Authorization: Bearer $TF_CLOUD_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --request DELETE \
            "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID"

      - name: Delete ECR images for this PR
        env:
          IMAGE_TAG: pr-${{ github.event.pull_request.number }}
        run: |
          echo "Deleting ECR image with tag: $IMAGE_TAG"
          aws ecr batch-delete-image \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=$IMAGE_TAG \
            --region $AWS_REGION || echo "Image not found or already deleted"

      - name: Comment PR with cleanup status
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const wasDestroyed = '${{ steps.check-workspace.outputs.exists }}' === 'true';

            let comment;
            if (wasDestroyed) {
              comment = `## âœ… PR Environment Cleaned Up

              Your PR environment has been successfully destroyed.

              **Cleaned up resources:**
              - ECS Service and tasks
              - Application Load Balancer
              - Security groups
              - ECR image (tag: \`pr-${prNumber}\`)
              - Terraform Cloud workspace
              - Vercel environment variables (backend URLs)

              All resources associated with PR #${prNumber} have been removed.
              Vercel preview deployments will be automatically cleaned up by Vercel.
              `;
            } else {
              comment = `## PR Environment Cleanup

              No PR environment was found for this PR. Nothing to clean up.
              `;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

      - name: Cleanup summary
        run: |
          echo "## PR Environment Cleanup Complete" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace existed:** ${{ steps.check-workspace.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-workspace.outputs.exists }}" == "true" ]; then
            echo "**Status:** All resources destroyed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** No resources found to clean up" >> $GITHUB_STEP_SUMMARY
          fi
